<?php

/**
 * @Author: 李朋
 * @Date:   2015-12-19 15:21:40
 * @Last Modified time: 2016-01-14 17:14:07
 */
class accountService extends Service {

	public function __construct() {
		parent::__construct();
	}

	public function memberTotal(){
		$memberTotal = $this->getRedis('default')->redis()->get('memberTotal');
		if(!$memberTotal){
			$memberTotal = InitPHP::getDao('account')->get_count();
			$this->getRedis('default')->redis()->set('memberTotal',$memberTotal);
		}
		return $memberTotal;
	}
	/**
	 * 添加会员帐号
	 * @param  [array] $data [会员帐号信息数据]
	 * @return [integer || blooean]       [添加是否成功]
	 */
	public function create($data) {
		//开启事务
		// InitPHP::getDao('account')->transaction_start();

		//添加用户
		$addAccountId = InitPHP::getDao('account')->create($data);

		//同步注册钱包账户
		$walletData = array(
			'userid' => $data['userid'],
			'shop_id' => '',
			'amount' => 0,
			'point' => 0,
			'frozen_amount' => 0,
			'current_month_bonus' => 0,
			'current_month_sales_amount' => 0,
		);
		//添加用户余额
		$addAccountAmount = InitPHP::getDao('wallet')->create($walletData);

		if ($addAccountId && $addAccountAmount) {
			//提交事务
			InitPHP::getDao('account')->transaction_commit();
			return InitPHP::Encode(0, 'Success', $addAccountId, 1);
		} else {
			//回滚事务
			InitPHP::getDao('account')->transaction_rollback();
			return InitPHP::Encode(1, 'Error', '', 1);
		}

	}

	/**
	 * 获取会员信息
	 */
	public function get($where) {
		$user = InitPHP::getDao('account')->get($where);
		if ($user) {
			return InitPHP::Encode(0, 'Success', $user, 1);
		} else {
			return InitPHP::Encode(1, 'Error', $where, 1);
		}
	}

	//修改密码
	public function modifyPassword($data, $where) {
		$modifyData = array('password' => $data['password'], 'encrypt' => $data['encrypt']);
		$modifyId = $this->update($modifyData, $where);
		if ($modifyId['code'] == 0) {
			return InitPHP::Encode(0, 'Success', $modifyId['data'], 1);
		} else {
			return InitPHP::Encode(1, 'Error', '', 1);
		}
	}

	/**
	 *  检测密码是否相同
	 */
	public function checkPassword($where, $password) {
		$result = InitPHP::getDao('account')->get($where);

		if (!$result) {
			//帐号不存在
			return InitPHP::Encode(2, 'Error', '', 1);
		} else if ($result['password'] != password($password, $result['encrypt'])) {
			//密码不正确
			return InitPHP::Encode(1, 'Error', '', 1);
		} else {
			//登录成功
			return InitPHP::Encode(0, 'Success', $result, 1);
		}
	}

	//更新数据
	public function update($data, $where) {
		$updateId = InitPHP::getDao('account')->update($data, $where);
		if ($updateId) {
			return InitPHP::Encode(0, 'Success', $updateId, 1);
		} else {
			return InitPHP::Encode(1, 'Error', '', 1);
		}
	}

	/**
	 * 根据条件查询一组数据
	 * @param [array] $where [查询条件]
	 * @param [integer] $offset [查询起始位置]
	 * @param [integer] $num [查询的数据数量]
	 * @param [array] $field [查询显示的字段]
	 * @param [versalType] $is_key  [排序关键字]
	 * @param [string] $sort [排序方式，参数：DESC,ASC;默认DESC]
	 * @return [array] $accountList 帐户信息列表
	 * @author lipeng
	 * @date 2016-01-15
	 */
	public function lists($where = array(), $num = 20, $offset = 0, $is_key = 'userid', $sort = 'DESC') {
		$list = InitPHP::getDao('account')->lists($where, $num, $offset, $is_key, $sort);
		if ($list) {
			return InitPHP::Encode(0, 'Success', $list, 1);
		} else {
			return InitPHP::Encode(1, 'Error', '', 1);
		}
	}

	/**
	 * get Account Wally
	 * @param [string] $userid []
	 * @return [string] $wally []
	 * @author lipeng
	 * @date 2016-01-15
	 */
	public function getWallet($where) {
		$wallet = InitPHP::getDao('account')->getWallet($where);
		if ($wallet) {
			return InitPHP::Encode(0, 'Success', $wallet, 1);
		} else {
			return InitPHP::Encode(1, 'Error', $wallet, 1);
		}
	}

	/**
	 * 获取一组消费记录信息
	 * @param  array   $where  [查询条件]
	 * @param  integer $sum    [查询的数据数量]
	 * @param  integer $offset [查询偏移]
	 * @param  string  $is_key [排序关键字]
	 * @param  string  $sort   [排序方式]
	 * @param  string  $field  [查询字段]
	 * @return [array] $collection [查询的数据集合]
	 * @author lipeng
	 * @date 2016-02-25
	 */
	public function consumLists($where = array('*'), $num = 20, $offset = 0, $is_key = 'id', $sort = 'DESC', $field = '*') {
		$collection = InitPHP::getDao('account')->consumLists($where, $num, $offset, $is_key, $sort, $field);
		if ($collection) {
			return InitPHP::Encode(0, 'Success', $collection, 1);
		} else {
			return InitPHP::Encode(1, 'Error', $collection, 1);
		}
	}

	/**
	 * 获取用户的总消费额度
	 * @param  [string] $userid [用户id]
	 * @return []         [用户总消费额度]
	 * @author 李鹏
	 * @date 2016-03-11
	 */
	public function getAllConsumptionQuota($userid) {
		$consumptionQuota = InitPHP::getDao('account')->getAllConsumptionQuota($userid);
		if ($consumptionQuota) {
			return InitPHP::Encode(0, 'Success', $consumptionQuota, 1);
		} else {
			return InitPHP::Encode(1, 'Error', '', 1);
		}
	}

	/**
	 * 获取用户等级
	 * @param  [string] $userid [用户id]
	 * @return [type]         [description]
	 */
	public function getLevels($userid) {
		$levels = InitPHP::getDao('account')->getLevels($userid);
		if ($levels) {
			return InitPHP::Encode(0, 'Success', $levels, 1);
		} else {
			return InitPHP::Encode(1, 'Error', '', 1);
		}
	}
	/**
	 * 获取用户推荐人
	 * @param  [string] $userid [用户id]
	 * @return [type]         [description]
	 */
	public function getParentId($userid) {
		$ParentId = InitPHP::getDao('account')->getParentId($userid);
		if ($ParentId) {
			return InitPHP::Encode(0, 'Success', $ParentId, 1);
		} else {
			return InitPHP::Encode(1, 'Error', '', 1);
		}
	}
	/**
	 * 删除一条记录
	 * @param int $userid;
	 */
	public function delete($userid) {
		$status = InitPHP::getDao('account')->delete($userid);
		if ($status) {
			return InitPHP::Encode(0, 'Success', $status, 1);
		} else {
			return InitPHP::Encode(1, 'Error', '', 1);
		}
	}

	/**
	 * 试用sql查询
	 * @param [string] $like [查询条件]
	 * @param [string] $wechat_openid [查询条件]
	 * @param [integer] $limit [查询起始位置]
	 * @param [integer] $offset [查询的数据数量]
	 */
	public function query_select($like, $wechat_openid, $limit, $offset) {
		if ($like && $wechat_openid) {
			$where = $wechat_openid . ' and (userid like "%' . $like . '%" or nickname like "%' . $like . '%" or wechat like "%' . $like . '%" or phone like "%' . $like . '%")';
		} else {
			if ($like) {
				$where = ' userid like "%' . $like . '%" or nickname like "%' . $like . '%" or wechat like "%' . $like . '%" or phone like "%' . $like . '%" ';
			} else {
				$where = $wechat_openid;
			}
		}

		$list = InitPHP::getDao('account')->query_select($where, $limit, $offset);
		if ($list) {
			return InitPHP::Encode(0, 'Success', $list, 1);
		} else {
			return InitPHP::Encode(1, 'Error', '', 1);
		}
	}

	/**
	 * 开通店铺
	 * @param  [string] $userid  [用户id]
	 * @param  [string] $total   [支付金额]
	 * @param  [ineger] $payType [支付方式]
	 * @return [type]          [description]
	 */
	public function openShop($userid, $username, $total, $payType) {
		$payAccount = '';
		$pay_status = 1; //支付状态
		$timer = time();
		$payNo = strtoupper(md5(create_sn())); //支付单号
		//开启事务
		InitPHP::getDao('account')->transaction_start();

		//获取支付的信息
		$pay_name_text = '余额支付';
		$getPayment = InitPHP::getDao('payment')->get(array('pay_id' => intval($payType)));
		$pay_name_text = $getPayment['pay_name'];
		switch (intval($getPayment['pay_id'])) {
		case 2: //微信支付

			/**
			 * 调用微信息接口
			 */
			//codeing.......
			$payAccount = '';
			$pay_status = '';
			break;
		case 3: //支付宝支付

			/**
			 * 调用支付宝支付接口
			 */
			//codeing........
			$payAccount = '';
			$pay_status = '';
			break;
		default: //余额支付
			$payAccount = $payNo;
			$pay_status = 2;
			break;
		}

		//支付数据
		$payData = array(
			'pay_no' => $payNo,
			'userid' => $userid,
			'username' => $username,
			'pay_type' => $payType,
			'pay_account' => $payAccount,
			'total' => $total,
			'pay_status' => $pay_status,
			'create_time' => $timer,
			'pay_time' => $timer,
		);

		//更新钱包
		$getUserAmount = InitPHP::getDao('wallet')->get(array('userid' => $userid));
		$sumAmount = sprintf("%01.2f", (sprintf("%01.2f", $total) + sprintf("%01.2f", $getUserAmount['amount'])));
		$updatePayWhere = array('userid' => $userid);
		$updatePayData = array('amount' => $sumAmount);

		//更新用户等级
		$updateAccountWhere = array('userid' => $userid);
		$updateAccountData = array('levels' => 1);

		//添加资金记录
		$capitalLiquidData = array(
			'userid' => $userid,
			'shop_id' => '',
			'title' => $pay_name_text . '开通店铺充值',
			'content' => $pay_name_text . '充值，充值金额：' . sprintf("%01.2f", $total) . '，支付帐号：' . $payAccount . '，总金额：' . $sumAmount,
			'amount' => sprintf("%01.2f", $total),
			'make' => '',
			'status' => 1,
			'type' => 2,
			'create_time' => $timer,
			'action' => -1,
		);

		//添加消息记录
		$msgData = array(
			'to_userid' => $userid,
			'from_userid' => 1,
			'title' => '开通店铺提醒消息',
			'contents' => htmlspecialchars('您于' . date('Y-m-d H:i:s', $timer) . '通过' . $pay_name_text . '充值' . sprintf("%01.2f", $total) . '元，充值成功，已成功升级为1级会员，可以开通店铺，请<a href="apply_shop.html">完成开店流程</a>，具体总金额请到<a href="account_list.html">我的帐单中</a>查看'),
			'type' => 1,
			'is_read' => 0,
			'create_time' => $timer,
		);

		//添加支付数据
		$addPay = InitPHP::getDao('pay')->create($payData);
		//更新钱包数据
		$updateAmountStatus = InitPHP::getDao('wallet')->update($updatePayData, $updatePayWhere);
		//更新用户等级
		$updateAccountLevels = $this->update($updateAccountData, $updateAccountWhere);
		//添加资金记录
		$addCapitalLiquid = InitPHP::getDao('capitalLiquid')->create($capitalLiquidData);
		//添加消息记录
		$addMsg = InitPHP::getDao('message')->create($msgData);

		if ($addPay > 0 && $updateAmountStatus && $updateAccountLevels['code'] == 0 && $updateAccountLevels['data'] && $addCapitalLiquid > 0 && $addMsg > 0) {
			//提交事务
			InitPHP::getDao('account')->transaction_commit();
			return InitPHP::Encode(0, 'Success', '', 1);
		} else {
			//回滚事务
			InitPHP::getDao('account')->transaction_rollback();
			return InitPHP::Encode(1, 'Error', '', 1);
		}

	}
}
